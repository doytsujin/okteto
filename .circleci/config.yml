# https://circleci.com/docs/2.0/configuration-reference/
aliases:
  - &init-gcloud |
    echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
version: 2.1
orbs:
  win: circleci/windows@2.1.0

executors:
  golang-ci:
    docker:
      - image: maroshii/golang-ci

jobs:
  build:
    executor: golang-ci
    steps:
      - checkout
      - run:
          command: go mod tidy && git diff --exit-code go.sum > /dev/null
      - run:
          name: Test
          command: |
            make test
            bash <(curl -s https://codecov.io/bash)
      - run: make build-integration
      - run: env VERSION_STRING=$CIRCLE_TAG make -j 3 build-all
      - run: env VERSION_STRING=$CIRCLE_TAG make latest
      - persist_to_workspace:
          root: .
          paths:
            - bin
      - save_cache:
          key: v4-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: bin
          destination: binaries
      - store_artifacts:
          path: coverage.txt
          destination: coverage.txt
  test-integration:
    executor: golang-ci
    environment:
      OKTETO_USER: cindylopez
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-pkg-cache-{{ checksum "go.sum" }}
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Prepare env
          command: |
            mkdir -p $HOME/.okteto
            touch $HOME/.okteto/.noanalytics
            echo $HOME
            sudo chown -R $(whoami) /usr/local/bin
            curl -L "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
            chmod +x /usr/local/bin/kubectl
            cp $(pwd)/artifacts/bin/okteto-Linux-x86_64 /usr/local/bin/okteto
            /usr/local/bin/okteto login --token ${API_TOKEN}
      - run:
          name: Integration tests
          environment:
            OKTETO_SKIP_CLEANUP: 'true'
          command: make integration
      - save_cache:
          key: v4-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: /root/.okteto
  test-release:
    executor: golang-ci
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - add_ssh_keys:
          fingerprints:
            - f7:81:9f:b4:31:3a:4d:46:ce:cf:54:a2:70:46:5a:df
      - deploy:
          name: Update brew formula
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            sha_arm=$(cat ./artifacts/bin/okteto-Darwin-arm64.sha256 | awk '{print $1}')
            ./scripts/update_homebrew_formula.sh 0.0.1 $sha $sha_arm
      - setup_remote_docker:
          version: '19.03.8'
      - run:
          name: Build Docker container
          command: |
            export DOCKER_BUILDKIT=1
            docker build -t okteto --build-arg VERSION_STRING=$CIRCLE_SHA1 .

  test-windows:
    executor: win/default
    environment:
      OKTETO_USER: cindylopez
    steps:
      - checkout
      - run:
          name: Upgrade Golang
          command: choco upgrade golang --version 1.17
      - restore_cache:
          keys:
            - v5-pkg-cache-windows-1-15-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: |
            go mod download
            go version
            go test ./...
      - run:
          name: Upgrade kubectl
          command: choco install kubernetes-cli
      - run:
          name: Upgrade helm
          command: choco install kubernetes-helm
      - attach_workspace:
          at: .\artifacts
      - run:
          name: Prepare env
          command: |
            new-item $HOME\.okteto -itemtype "directory" -force
            new-item $HOME\.okteto\.noanalytics -itemtype "file" -value "noanalytics" -force
            & 'C:\Users\circleci\project\artifacts\bin\okteto.exe' login --token $env:API_TOKEN
      - run:
          name: Integration tests
          environment:
            OKTETO_PATH: 'C:\Users\circleci\project\artifacts\bin\okteto.exe'
            OKTETO_SKIP_CLEANUP: 'true'
          command: |
            go test github.com/okteto/okteto/integration -tags="common integration actions" --count=1 -v -timeout 1h
      - save_cache:
          key: v5-pkg-cache-windows-1-15-{{ checksum "go.sum" }}
          paths:
            - C:\Users\circleci\AppData\Local\go-build
            - C:\Users\circleci\go\pkg
            - C:\Go\pkg
      - store_artifacts:
          path: C:\Users\circleci\.okteto
  
  push-image:
    executor: golang-ci
    parameters:
      tag:
        type: env_var_name
        default: IMAGE_TAG
    steps:
      - checkout
      - setup_remote_docker:
          version: '19.03.8'
      - run:
          name: Resolve Tag
          command: |
              if [[ -z "<< pipeline.git.branch >>" ]]; then
                echo "export IMAGE_TAG=<< pipeline.git.tag >>" >> $BASH_ENV
              elif [ << pipeline.git.branch >> = "master" ] || [ << pipeline.git.branch >> = "main" ]; then
                echo "export IMAGE_TAG=latest" >> $BASH_ENV
              else
                echo "export IMAGE_TAG=<< pipeline.git.branch >>" >> $BASH_ENV
              fi
      - run:
          name: Publish Docker container
          command: |
            echo "using tag -> ${<< parameters.tag >>}"
            export DOCKER_BUILDKIT=1
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker build -t okteto/okteto:${<< parameters.tag >>} --build-arg VERSION_STRING=${<< parameters.tag >>} .
            echo "docker push okteto/okteto:${<< parameters.tag >>}"

  # release-beta:
  #   executor: golang-ci
  #   steps:
  #     - release:
  #         channel: beta
  # release-dev:
  #   executor: golang-ci
  #   steps:
  #     - release:
  #         channel: dev
  # release-stable:
  #   executor: golang-ci
  #   steps:
  #     - release:
  #         channel: stable

  release-external-channels:
    executor: golang-ci
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - run: *init-gcloud
      - setup_remote_docker:
          version: '19.03.8'
      - add_ssh_keys:
          fingerprints:
            - f7:81:9f:b4:31:3a:4d:46:ce:cf:54:a2:70:46:5a:df
      - deploy:
          name: Update brew formula
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            sha_arm=$(cat ./artifacts/bin/okteto-Darwin-arm64.sha256 | awk '{print $1}')
            ./scripts/update_homebrew_formula.sh $CIRCLE_TAG $sha $sha_arm
            pushd homebrew-cli
            git push git@github.com:okteto/homebrew-cli.git master
      - deploy:
          name: Auto-update-actions
          command: |
            go get -u github.com/tcnksm/ghr
            ./scripts/update_actions.sh $CIRCLE_TAG

  release:
    executor: golang-ci
    parameters:
      channel:
        default: "stable"
        type: enum
        enum: ["stable", "beta", "dev"]
    environment:
      CIRCLE_TAG: "2.3.0"
    steps:
      - attach_workspace:
          at: ./artifacts
      - run: *init-gcloud
      - run:
          name: Upload release binaries
          command: |
            echo "gsutil -m rsync -r ./artifacts/bin gs://downloads.okteto.com/cli/<<parameters.channel>>/${CIRCLE_TAG}"
      - run:
          name: Update channel versions
          command: |
            version_temp=$(mktemp)
            gsutil cat gs://downloads.okteto.com/cli/<<parameters.channel>>/versions > $version_temp
            echo "Current version list for <<parameters.channel>> channel (latest 20 versions):"
            tail $version_temp -n 20
            echo "Adding ${CIRCLE_TAG} to the version list"
            echo ${CIRCLE_TAG} >> $version_temp
            cat $version_temp | okteto-ci-utils semver-sort > ./artifacts/bin/versions
            echo "New version list for <<parameters.channel>> channel (latest 20 versions):"
            tail ./artifacts/bin/versions -n 20
            echo "gsutil -m -h \"Cache-Control: no-store\" -h \"Content-Type: text\" cp ./artifacts/bin/versions gs://downloads.okteto.com/cli/<<parameters.channel>>/versions"
      - run:
          name: Publish Release on GitHub
          command: |
            current_version=${CIRCLE_TAG}
            previous_version=$(grep -F $current_version -B 1 ./artifacts/bin/versions | head -n1)
            echo "Gathering ${current_version} release notes. Diffing from ${previous_version}"
            notes=$(curl \
              -fsS \
              -X POST \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"tag_name\":\"$current_version\",\"previous_tag_name\":\"$previous_version\"}" \
              https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/generate-notes | jq .body)
            echo "RELEASE NOTES: "
            printf "${notes}"

            prerelease=false
            name="Okteto CLI - ${current_version}"
            if [ << parameters.channel >> = "beta" ] || [ << parameters.channel >> = "dev" ]; then
              prerelease=true
              name="Okteto CLI [<< parameters.channel >>] - ${current_version}"
            fi
            GOPROXY=direct GOSUMDB=off go install github.com/tcnksm/ghr@latest
            echo "Using ghr version: $(ghr -version)"
            echo "ghr \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -n "${name}" \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -token ${GITHUB_TOKEN} \
              -b ${notes} \
              -replace \
              -prerelease=${prerelease} \
              ${current_version} \
              ./artifacts/bin/"
  release-branch:
    executor: golang-ci
    steps:
      - checkout
      - run: |
          set -x
          current_branch=$(git rev-parse --abbrev-ref HEAD)
          echo "current branch: $current_branch"
          base_tag=$(echo $current_branch | cut -d- -f2)
          git --no-pager log --pretty=oneline -n 20 --graph --abbrev-commit
          if git describe --tags --exact-match "${base_tag}.0"; then
            echo "Release target for $base_tag does not exist. Creating ${base_tag}.0..."
          else
            echo "Release target for $base_tag not exist..."
          fi
          echo ""
          git describe --tags
          echo ""
          git describe --tags --abbrev=0
workflows:
  version: 2
  lts:
    jobs:
      - release-branch:
          filters:
            branches:
              only: /^lts-\d+\.\d+$/

  release-beta:
    jobs:
      - build:
          filters:
            branches:
              only: release-tooling
      - push-image:
          requires:
            - build
          filters:
            branches:
              only: release-tooling
      - release:
          channel: beta
          context: GKE
          requires:
            - build
          filters:
            branches:
              only: release-tooling

  # build-release:
  #   jobs:
  #     - build:
  #         filters:
  #           tags:
  #             only: /.*/
  #     - integration:
  #         requires:
  #           - build
  #         filters:
  #           branches:
  #             only:
  #               - master
  #               - /.*(e2e)/
  #               - /.*(integration)/
  #               - /^release-\d+\.\d+$/
  #     - mock-release:
  #         context: GKE
  #         requires:
  #           - build
  #         filters:
  #           tags:
  #             only: /.*/
  #           branches:
  #             ignore: master
  #     - release-master:
  #         context: GKE
  #         requires:
  #           - integration
  #         filters:
  #           branches:
  #             only: master
  #     - release:
  #         context: GKE
  #         requires:
  #           - build
  #         filters:
  #           tags:
  #             only: /^\d+\.\d+\.\d+$/
  #           branches:
  #             ignore: /.*/
  #     - release-candidate:
  #         context: GKE
  #         requires:
  #           - build
  #         filters:
  #           tags:
  #             only: /^\d+\.\d+\.\d+-rc\.\d+$/
  #           branches:
  #             ignore: /.*/
  #     - windows-unit:
  #         requires:
  #           - build
  #         filters:
  #           branches:
  #             only:
  #               - master
  #               - /.*(windows|win)/
